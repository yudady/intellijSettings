<application>
  <component name="AppStorage">
    <histories>
      <item value="* Instantiate the javaBean named as a * child of this &lt;code&gt;BeanContext&lt;/code&gt;. * The implementation of the JavaBean is * derived from the value of the beanName parameter, * and is defined by the * &lt;code&gt;java.beans.Beans.instantiate()&lt;/code&gt; method. *" />
      <item value="Retains" />
      <item value="encapsulating" />
      <item value="Of Int" />
      <item value="* Characteristic value signifying that an encounter order is defined for * elements. If so, this Spliterator guarantees that method * {@link #trySplit} splits a strict prefix of elements, that method * {@link #tryAdvance} steps by one element in prefix order, and that * {@link #forEachRemaining} performs actions in encounter order." />
      <item value="* Characteristic value signifying that an encounter order is defined for * elements. If so, this Spliterator guarantees that method * {@link #trySplit} splits a strict prefix of elements, that method * {@link #tryAdvance} steps by one element in prefix order, and that * {@link #forEachRemaining} performs actions in encounter order. * * &lt;p&gt;A {@link Collection} has an encounter order if the corresponding * {@link Collection#iterator} documents an order. If so, the encounter * order is the same as the documented order. Otherwise, a collection does * not have an encounter order. * * @apiNote Encounter order is guaranteed to be ascending index order for * any {@link List}. But no order is guaranteed for hash-based collections * such as {@link HashSet}. Clients of a Spliterator that reports * {@code ORDERED} are expected to preserve ordering constraints in * non-commutative parallel computations. */" />
      <item value="* &lt;p&gt;Unless this Spliterator covers an infinite number of elements, * repeated calls to {@code trySplit()} must eventually return {@code null}. * Upon non-null return:" />
      <item value="* If this spliterator can be partitioned, returns a Spliterator * covering elements, that will, upon return from this method, not * be covered by this Spliterator." />
      <item value="exclusively" />
      <item value="manipulate" />
      <item value="contrast" />
      <item value="restrictions" />
      <item value="primitive" />
      <item value="stream" />
      <item value="representing" />
      <item value="example" />
      <item value="spliterator" />
      <item value="Collectors" />
      <item value="Widget" />
      <item value="confined" />
      <item value="* &lt;li&gt;The first argument passed to the accumulator function, both * arguments passed to the combiner function, and the argument passed to the * finisher function must be the result of a previous invocation of the * result supplier, accumulator, or combiner functions.&lt;/li&gt;" />
      <item value="accumulated" />
      <item value="associativity" />
      <item value="identity" />
      <item value="accumulates" />
      <item value="mutable reduction operation" />
      <item value="mutable" />
      <item value="A &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;mutable reduction operation&lt;/a&gt; that * accumulates input elements into a mutable result container, optionally transforming * the accumulated result into a final representation after all input elements * have been processed. Reduction operations can be performed either sequentially * or in parallel." />
      <item value="* A &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;mutable reduction operation&lt;/a&gt; that * accumulates input elements into a mutable result container, optionally transforming * the accumulated result into a final representation after all input elements * have been processed. Reduction operations can be performed either sequentially * or in parallel." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="34" />
        <entry key="CHINESE_TRADITIONAL" value="32" />
        <entry key="CROATIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>